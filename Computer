/**
 * A program based on an automated computer security system.
 * 
 * @Dayna Lei & Alyssa Evans 
 * @1
 */
public class Computer
{
    /**
     * Responds to the statements provided by the other chatbots.
     */
    public static String getResponse(String statement)
    {
        String response = "";
        if (findKeyword(statement, "There is something for me to manipulate here.") >= 0)
        {
            response = "Computer: Error Message #1: There has been a problem regarding the electronic signals within the system. Attempt to fix. Fail.";
        }
        else if (findKeyword(statement, "Yet look what you did.") >= 0)
        {
            response = "Computer: Error Message #2: Intruders detected within the system. Searching for most effective method of extermination. Search completed. Proceeding with extermination.";
        }
        else if (findKeyword(statement, "I guess I’ll end this then.") >= 0)
        {
            response = "Computer: Error Message #3: Intruders successfully exterminated.";
        }
        return(response);
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string (so, for example, "I know" does not contain "no").  
     * @param statement - the string to search
     * @param goal the string to search for
     * @param startPos the character of the string to begin the search at
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private static int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        //  The only change to incorporate the startPos is in the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);
        //  Refinement--make sure the goal isn't part of a word 
        while (psn >= 0) 
        {
            //  Find the string of length 1 before and after the word
            String before = " ", after = " "; 
            if (psn > 0)
            {
                before = phrase.substring (psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() < phrase.length())
            {
                after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();
            }
            //  If before and after aren't letters, we've found the word
            if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  //  before is not a letter
            && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))
            {
                return psn;
            }
            //  The last position didn't work, so let's find the next, if there is one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);
        }
        return -1;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.  
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private static int findKeyword(String statement, String goal)
    {
        return findKeyword (statement, goal, 0);
    }
}
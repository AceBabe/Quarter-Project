/**
 * A program that generates responses 
 * based on Miyumi's personality
 * This version:
 *      Uses advanced search for keywords
 *      Will transform statements as well as react to keywords
 *      Uses an array to hold default reponses
 * @author (Alyssa Evans + Dayna Lei)
 * @version (May 6, 2015)
 */
public class Miyumi
{  
    /**
     * Responds to the statements made by the other bots 
     * @param statement
     * @ return a response based on the rules given
     */
    public static String getResponse(String statement)
    {
        String response = "";
        if (findKeyword(statement, "wouldn’t suggest you destroy everything") >= 0)
        {
            response = "Nii-san~ That’s not nice. This could be important.";
        }
        else if (findKeyword(statement, "Wah! says Misaka") >= 0)
        {
            response = "*Kicks Kira in the knee* Don’t be mean to Nanami!";
        }
        else if (findKeyword(statement, "You’re all childish.") >= 0)
        {
            response = "I know~";
        }
        else if (findKeyword(statement, "Wah, scary…") >= 0)
        {
            response = "Ha! Victory is mine!";
        }
        else if (findKeyword(statement, "Waaaiiit. If you mess with the electronic signals,") >= 0)
        {
            response = "I don’t understand why you guys can’t all get along.";
        }
        else if (findKeyword(statement, "not my fault that they have such tempers") >= 0)
        {
            response = "*Wags finger at Accelerator and Kira* Temper. Temper.";
        }
        else if (findKeyword(statement, "I’ll join you!") >= 0)
        {
            response = "...Nii-san~ Should we be concerned?";
        }
        else if (findKeyword(statement, "I wonder how much damage I can do to a computer") >= 0)
        {
            response = "Okay Nii-san!";
        }
        return(response);
    }

    /**
     * To continue the response of silence
     */
    public static boolean getSilence()
    {
        Kira k = new Kira();
        String si = "";
        if (k.getSilence() == true)
        {
            si = "...";
        }
        System.out.println(si);
        return true;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  
     * @param statement the string to search
     * @param goal the string to search for
     * @param startPos the character of the string to begin the search at
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private static int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        //  The only change to incorporate the startPos is in the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);

        //  Refinement--make sure the goal isn't part of a word 
        while (psn >= 0) 
        {
            //  Find the string of length 1 before and after the word
            String before = " ", after = " "; 
            if (psn > 0)
            {
                before = phrase.substring (psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() < phrase.length())
            {
                after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();
            }

            //  If before and after aren't letters, we've found the word
            if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  //  before is not a letter
            && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))
            {
                return psn;
            }

            //  The last position didn't work, so let's find the next, if there is one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);

        }

        return -1;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.  
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private static int findKeyword(String statement, String goal)
    {
        return findKeyword (statement, goal, 0);
    }
}
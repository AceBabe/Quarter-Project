/**
 * A program that generates responses 
 * based on Last Order's personality
 * This version:
 *      Uses advanced search for keywords
 *      Will transform statements as well as react to keywords
 *      Uses an array to hold default reponses
 * @author (Alyssa Evans + Dayna Lei)
 * @version (April 20, 2015)
 */
public class LastOrder
{  
    /**
     * Responds to the statements made by the other bots 
     * @param statement
     * @ return a response based on the rules given
     */
    public void getResponse(String statement)
    {
        String response = "";
        if (findKeyword(statement, "But I'm Ryuuri, ne!") >= 0)
        {
            response = "You should’ve been paying attention! says Misaka as Misaka chastises the child in front of her.";
        }
        else if (findKeyword(statement, "I’m a higher level") >= 0)
        {
            response = "Your power doesn’t even have any destructive power like Misaka’s! says Misaka as Misaka puffs out her chest with pride.";
        }
        else if (findKeyword(statement, "*smacks Nanami*") >= 0)
        {
            response = "Wah! says Misaka as Misaka runs away in fear!";
        }
        else if (findKeyword(statement, "Last Order, let’s go.") >= 0)
        {
            response = "Misaka refuses! says Misaka as Misaka runs to the other side of the room and clings to the wall!";
        }
        else if (findKeyword(statement, "know that there’s another side") >= 0)
        {
            response = "Misaka has a sixth sense for physical dimensions by using Misaka’s powers, says Misaka as Misaka heavily stretches the truth.";
        }
        else if (findKeyword(statement, "Error Message #2") >= 0)
        {
            response = "Misaka senses great danger! says Misaka as Misaka quickly hides!";
        }
        System.out.println(response);
    }
    
    public boolean check(String statement)
    {
        getResponse(statement);
        return true;
    }

    /**
     * To continue the response of silence
     */
    public boolean getSilence()
    {
        Ryuuri r = new Ryuuri();
        String si = "";
        if (r.getSilence() == true)
        {
            si = "...";
        }
        System.out.println(si);
        return true;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  
     * @param statement the string to search
     * @param goal the string to search for
     * @param startPos the character of the string to begin the search at
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        //  The only change to incorporate the startPos is in the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);

        //  Refinement--make sure the goal isn't part of a word 
        while (psn >= 0) 
        {
            //  Find the string of length 1 before and after the word
            String before = " ", after = " "; 
            if (psn > 0)
            {
                before = phrase.substring (psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() < phrase.length())
            {
                after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();
            }

            //  If before and after aren't letters, we've found the word
            if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  //  before is not a letter
            && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))
            {
                return psn;
            }

            //  The last position didn't work, so let's find the next, if there is one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);

        }

        return -1;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.  
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private int findKeyword(String statement, String goal)
    {
        return findKeyword (statement, goal, 0);
    }
}
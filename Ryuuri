/**
 * A program based on the personality of original character Ryuuri Haruko.
 * 
 * @Dayna Lei and Alyssa Evans
 * @1
 */
public class Ryuuri
{
    /**
     * Responds to the statements provided by other chatbots. 
     */
    public static String getResponse(String statement)
    {
        String response = "";
        if (findKeyword(statement, "Stop being mean to your sister.") >= 0)
        {
            response = "Eh...I don't really know what's going on right now...But I'm Ryuuri, ne!";
        }
        else if (findKeyword(statement, "You should’ve been paying attention! says Misaka as Misaka chastises the child in front of her.") >= 0)
        {
            response = "I’m not a child! I’m a higher level than you!";
        }
        else if (findKeyword(statement, "I know~") >= 0)
        {
            response = "Ne, onee-sama, why do you have such a scary face on?";
        }
        else if (findKeyword(statement, "WHY DO YOU THINK, I GOT KICKED IN THE KNEE!") >= 0)
        {
            response = "Wah, scary...";
        }
        else if (findKeyword(statement, "However, we’re clearly not in a room or in the physical universe, so Last Order is definitely lying.") >= 0)
        {
            response = "We're not in the physical universe?";
        }
        else if (findKeyword(statement, "Misaka senses great danger! says Misaka as Misaka quickly hides!") >= 0)
        {
            response = "I'll join you!";
        }
        return(response);
    }

    public static boolean getSilence()
    {
        Nanami n = new Nanami();
        String response = "";
        if (n.getSilence() == true)
        {
            response = "...";
        }
        System.out.println(response);
        return true;
    }

    private static int findKeyword(String statement, String goal, int startPos)
    {
        String phrase = statement.trim();
        //  The only change to incorporate the startPos is in the line below
        int psn = phrase.toLowerCase().indexOf(goal.toLowerCase(), startPos);
        //  Refinement--make sure the goal isn't part of a word 
        while (psn >= 0) 
        {
            //  Find the string of length 1 before and after the word
            String before = " ", after = " "; 
            if (psn > 0)
            {
                before = phrase.substring (psn - 1, psn).toLowerCase();
            }
            if (psn + goal.length() < phrase.length())
            {
                after = phrase.substring(psn + goal.length(), psn + goal.length() + 1).toLowerCase();
            }
            //  If before and after aren't letters, we've found the word
            if (((before.compareTo ("a") < 0 ) || (before.compareTo("z") > 0))  //  before is not a letter
            && ((after.compareTo ("a") < 0 ) || (after.compareTo("z") > 0)))
            {
                return psn;
            }
            //  The last position didn't work, so let's find the next, if there is one.
            psn = phrase.indexOf(goal.toLowerCase(), psn + 1);
        }
        return -1;
    }

    /**
     * Search for one word in phrase.  The search is not case sensitive.
     * This method will check that the given goal is not a substring of a longer string
     * (so, for example, "I know" does not contain "no").  The search begins at the beginning of the string.  
     * @param statement the string to search
     * @param goal the string to search for
     * @return the index of the first occurrence of goal in statement or -1 if it's not found
     */
    private static int findKeyword(String statement, String goal)
    {
        return findKeyword (statement, goal, 0);
    }
}